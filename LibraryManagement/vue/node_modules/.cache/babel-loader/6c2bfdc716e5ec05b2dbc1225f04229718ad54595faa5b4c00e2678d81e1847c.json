{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport router from \"@/router\";\nimport Cookies from \"js-cookie\";\nconst request = axios.create({\n  baseURL: \"http://localhost:9090/api\",\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n  const adminJson = Cookies.get('admin');\n  if (!adminJson) {\n    JSON.parse;\n  }\n  config.headers['token'] = user.token; // 设置请求头\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === \"string\") {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === \"401\") {\n    router.push(\"/login\");\n  }\n  return res;\n}, error => {\n  console.log(\"err\" + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","Cookies","request","create","baseURL","timeout","interceptors","use","config","headers","adminJson","get","JSON","parse","user","token","error","Promise","reject","response","res","data","code","push","console","log"],"sources":["/Users/justyn/MyProject/Library-Management/library/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\nimport router from \"@/router\";\nimport Cookies from \"js-cookie\";\n\nconst request = axios.create({\n  baseURL: \"http://localhost:9090/api\", // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000,\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(\n  (config) => {\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n\n    const adminJson = Cookies.get('admin')\n    if (!adminJson) {\n        JSON.parse\n    }\n    config.headers['token'] = user.token;  // 设置请求头\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  (response) => {\n    let res = response.data;\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    if (res.code === \"401\") {\n      router.push(\"/login\");\n    }\n\n    return res;\n  },\n  (error) => {\n    console.log(\"err\" + error); // for debug\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAC7BC,MAAM,IAAK;EACVA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EAEjE,MAAMC,SAAS,GAAGT,OAAO,CAACU,GAAG,CAAC,OAAO,CAAC;EACtC,IAAI,CAACD,SAAS,EAAE;IACZE,IAAI,CAACC,KAAK;EACd;EACAL,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGK,IAAI,CAACC,KAAK,CAAC,CAAE;EACvC,OAAOP,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACAd,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACZ,GAAG,CAC9BY,QAAQ,IAAK;EACZ,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IAC3BA,GAAG,GAAGA,GAAG,GAAGR,IAAI,CAACC,KAAK,CAACO,GAAG,CAAC,GAAGA,GAAG;EACnC;EACA,IAAIA,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACtBtB,MAAM,CAACuB,IAAI,CAAC,QAAQ,CAAC;EACvB;EAEA,OAAOH,GAAG;AACZ,CAAC,EACAJ,KAAK,IAAK;EACTQ,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGT,KAAK,CAAC,CAAC,CAAC;EAC5B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}